#!/usr/bin/env bash
# This script helps me to remember what to install
#

set -o nounset
set -e

###
# Configuration
###

# name|graphical?|nixpkg|test|testparam
software=(
	"SECTION|Basic things"
	"zsh|no|zsh|command|zsh"
	"git|no|git|command|git"
	"pacaur|no|SKIP|command|pacaur"
	"htop|no|htop|command|htop"
	"curl|no|curl|command|curl"
	"sudo|no||command|sudo"
	"systemd|no||command|systemctl"
	"coreutils|no|coreutils|command|cat"
	"util-linux|no||command|lsblk"
	"gawk|no|gawk|command|awk"
	"iptuils|no|iputils|command|ping"
	"iproute2|no|iproute2|command|ip"
	"binutils|no|binutils|command|objdump"

	"SECTION|vim"
	"vim|no|vim|command|vim"
	"ctags|no|ctags|command|ctags"
	"pandoc|no|pandoc|command|pandoc"

	"SECTION|Alias targets from zshrc"
	"bc|no|bc|command|bc"
	"minicom|no|minicom|command|minicom"
	"zfs|no||command|zfs"
	"rsync|no|rsync|command|rsync"

	"SECTION|tmux"
	"tmux|no|tmux|command|tmux"
	"vlock|no|vlock|command|vlock"

	"SECTION|Archive extractors"
	"tar|no|gnutar|command|tar"
	"bzip2|no|bzip2|command|bunzip2"
	"gzip|no|gzip|command|gunzip"
	"unzip|no|unzip|command|unzip"
	"p7zip|no|p7zip|command|7z"
	"xz|no|xz|command|unlzma"
	"cabextract|no|cabextract|command|cabextract"

	"SECTION|Stuff"
	"gpg|no|gnupg|command|gpg"
	"libcaca|no|libcaca|command|cacaview"
	"bind-tools|no|bind|command|dig"

	"SECTION|Graphical stuff"
	# startx and xinitrc
	"xorg-xinit|yes|nixos.xorg.xinit|command|xinit"
	"xorg-xmodmap|yes|nixos.xorg.xmodmap|command|xmodmap"
	"xorg-xset|yes|nixos.xorg.xset|command|xset"
	"xorg-xbacklight|yes|nixos.xorg.xbacklight|command|xbacklight"
	"libevdev|yes|nixos.xorg.xf86inputevdev|file|${HOME}/.nix-profile/lib/xorg/modules/input/evdev_drv.so"
	"numlockx|yes|numlockx|command|numlockx"
	"i3|yes|i3|command|i3"
	"gtk3|yes|nixos.gnome3.gtk|command|gtk-launch"
	# Other stuff
	"st|yes|st|command|st"
	"Anonymous Pro font|yes|anonymousPro|exec|[ ! `fc-list "Anonymous Pro" | wc -l` -eq 0 ]"
	"numix theme|yes|numix-gtk-theme|file|/usr/share/themes/Numix/index.theme"
	"adwaita-icon-theme|yes|nixos.gnome3.adwaita-icon-theme|file|/usr/share/themes/Numix/index.theme"
	"feh|yes|feh|command|feh"
	"dunst|yes|dunst|command|dunst"
	"rofi|yes|rofi|command|rofi"
	"firefox|yes|firefox|command|firefox"
	"fontconfig|yes|fontconfig|command|fc-list"
	"xdg-utils|yes|xdg-utils|command|xdg-open"
	"redshift-gtk|yes|redshift|command|redshift-gtk"
	"openimageio|yes|openimageio|command|iv"
	"dbus|yes|dbus|command|dbus-send"
	"spotify|yes|spotify|command|spotify"
	"xclip|yes|xclip|command|xclip"
	"xdotool|yes|xdotool|command|xdotool"
	"slock|yes|slock|command|slock"
	"noto-fonts|yes|nixos.noto-fonts|exec|[ ! $(fc-list 'Noto Sans' | wc -l) -eq 0 ]"
	"noto-fonts-emoji|yes|nixos.noto-fonts-emoji|exec|[ ! $(fc-list 'Noto Color Emoji' | wc -l) -eq 0 ]"
	"telegram-desktop|yes|nixos.tdesktop|command|telegram-desktop"
	"xcalib|yes||command|xcalib"
)


###
# Colors
###
_colors="$(tput colors 2>/dev/null)"
if (( _colors > 0 )) && tput setaf 0 &>/dev/null; then
	_color_none="$(tput sgr0)"
	_color_bold="$(tput bold)"
	_color_green="${_color_bold}$(tput setaf 2)"
	_color_yellow="${_color_bold}$(tput setaf 3)"
	_color_red="${_color_bold}$(tput setaf 1)"
fi

###
# Main
###
isnix=0
graphical=0
nixpkgs=''
fullNixpkgs=''
if [ -f /etc/os-release ]; then
	if [ "$(grep ^ID /etc/os-release)" = 'ID=nixos' ]; then
		isnix=1
	fi
fi
if which X &>/dev/null; then
	graphical=1
fi
	graphical=1


for sw in "${software[@]}"; do
	# Parse this software
	prettyname="$(echo "${sw}" | cut -d'|' -f1)"
	isgraphical="$(echo "${sw}" | cut -d'|' -f2)"
	# Headings
	if [ "${prettyname}" = "SECTION" ]; then
		echo "${_color_green}==>${_color_none} ${_color_bold}${isgraphical}${_color_none}"
		continue
	fi
	nixpkg="$(echo "${sw}" | cut -d'|' -f3)"
	checktype="$(echo "${sw}" | cut -d'|' -f4)"
	checkarg="$(echo "${sw}" | cut -d'|' -f5-)"
	# Prepare the message
	msgsuffix=''
	test "${isgraphical}" == 'yes' && msgsuffix="${msgsuffix} (graphical)"
	# Ignore if not graphical
	if [ "${graphical}" = 0 ] && [ "${isgraphical}" = yes ]; then
		echo -e "    [ ${_color_yellow}skip${_color_none} ] ${prettyname}${msgsuffix}"
		continue
	fi
	# Ignore arch-related packages on nix
	if [ "${nixpkg}" = SKIP ] && [ "${isnix}" = 1 ]; then
		echo -e "    [ ${_color_yellow}skip${_color_none} ] ${prettyname}${msgsuffix}"
		continue
	fi

	# Perform the actual check
	okay=0
	set +e
	case "${checktype}" in
		'command')
			which "${checkarg}" &>/dev/null
			okay="${?}"
			;;
		'file')
			test -f "${checkarg}"
			okay="${?}"
			;;
		'exec')
			${checkarg} &>/dev/null
			okay="${?}"
			;;
		*)
			okay=255
	esac
	set -e
	# Process check result
	if [ "${okay}" -eq 0 ]; then
		echo -e "    [ ${_color_green}okay${_color_none} ] Checking for ${prettyname}${msgsuffix}"
	else
		echo -e "    [ ${_color_red}miss${_color_none} ] Checking for ${prettyname}${msgsuffix}"
		if [ "${nixpkg}" != SKIP ] && ! [ -z "${nixpkg}" ]; then
			if [[ "${nixpkg}" == *"."* ]]; then
				fullNixpkgs="${fullNixpkgs} ${nixpkg}"
			else
				nixpkgs="${nixpkgs} ${nixpkg}"
			fi
		fi
	fi
done
if [ "${isnix}" = 1 ] && ! [ -z "${nixpkgs}" ]; then
	echo "${_color_green}==>${_color_none} ${_color_bold}Installing using nix-env${_color_none}"
	nix-env -i ${nixpkgs}
fi
if [ "${isnix}" = 1 ] && ! [ -z "${fullNixpkgs}" ]; then
	echo "${_color_green}==>${_color_none} ${_color_bold}Installing using nix-env${_color_none}"
	nix-env -iA ${fullNixpkgs}
fi
